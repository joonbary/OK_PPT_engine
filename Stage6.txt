🏗️ 기술 스택 및 아키텍처
Frontend (UI Layer)
yamlFramework: Streamlit (빠른 프로토타입) 또는 React (프로덕션)
  
옵션 1 - Streamlit (권장):
  - 이유: Python 개발자 친화적, 빠른 개발, 백엔드 통합 용이
  - 단점: 커스터마이징 제한
  
옵션 2 - React + FastAPI:
  - 이유: 완전한 커스터마이징, 프로덕션 레디
  - 단점: 개발 시간 증가

추천: Streamlit으로 먼저 MVP 구축 → 필요시 React 전환
Backend (기존 활용)
python# 이미 구축된 모듈들
app/
├── core/
│   ├── slide_validator.py      # Stage 4 검증
│   ├── slide_fixer.py          # Stage 4 자동 수정
│   └── text_fitter.py          # Stage 4 텍스트 최적화
├── services/
│   ├── workflow_orchestrator.py    # 전체 파이프라인 오케스트레이션
│   ├── content_generator.py        # Stage 3
│   ├── design_applicator.py        # Stage 4
│   ├── quality_controller.py       # Stage 5
│   ├── headline_generator.py       # Stage 3
│   └── insight_ladder.py           # Stage 3
└── agents/
    ├── strategist_agent.py         # Stage 1, 2
    ├── data_analyst_agent.py       # Stage 1, 3
    └── storyteller_agent.py        # Stage 2, 3
데이터 흐름
User Upload
    ↓
[Stage 1] → analysis_result.json
    ↓
[Stage 2] → structure_design.json
    ↓
[Stage 3] → content_generated.json
    ↓
[Stage 4] → presentation.pptx + preview.png
    ↓
[Stage 5] → quality_report.json
    ↓
Download PPT

📝 Claude Code 실행 계획 (Step-by-Step)
Phase 1: Streamlit UI 기반 구조 (Week 1)
Step 1.1: 프로젝트 초기 설정
bash# 작업 디렉토리
cd D:\PPT_Designer_OK

# 새 디렉토리 생성
mkdir frontend
cd frontend

# 필수 패키지 설치
pip install streamlit streamlit-extras pillow python-docx PyPDF2
생성할 파일:
frontend/
├── app.py                      # 메인 앱
├── pages/
│   ├── 1_📄_문서분석.py
│   ├── 2_🏗️_구조설계.py
│   ├── 3_✍️_콘텐츠생성.py
│   ├── 4_🎨_디자인적용.py
│   └── 5_✅_품질검토.py
├── components/
│   ├── file_uploader.py
│   ├── progress_tracker.py
│   └── preview_renderer.py
└── utils/
    ├── session_state.py
    └── api_connector.py
Step 1.2: Stage 1 UI 구현
파일: frontend/pages/1_📄_문서분석.py
pythonimport streamlit as st
import sys
sys.path.append('D:/PPT_Designer_OK')

from app.agents.strategist_agent import StrategistAgent
from app.agents.data_analyst_agent import DataAnalystAgent

st.set_page_config(page_title="Stage 1: 문서 분석", page_icon="📄")

st.title("📄 Stage 1: 문서 분석")
st.markdown("---")

# 파일 업로드
uploaded_file = st.file_uploader(
    "비즈니스 문서를 업로드하세요",
    type=['docx', 'pdf', 'txt'],
    help="지원 형식: DOCX, PDF, TXT"
)

# 또는 텍스트 직접 입력
text_input = st.text_area(
    "또는 텍스트를 직접 입력하세요",
    height=200,
    placeholder="여기에 비즈니스 내용을 입력하세요..."
)

if st.button("🔍 분석 시작", type="primary"):
    if uploaded_file or text_input:
        with st.spinner("문서 분석 중..."):
            # 문서 파싱
            if uploaded_file:
                content = parse_document(uploaded_file)
            else:
                content = text_input
            
            # StrategistAgent 실행
            strategist = StrategistAgent()
            analysis_result = strategist.analyze_document(content)
            
            # 세션에 저장
            st.session_state['stage1_result'] = analysis_result
            
        # 결과 표시
        st.success("✅ 분석 완료!")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("🎯 핵심 메시지")
            st.info(analysis_result['core_message'])
            
            st.subheader("📊 데이터 포인트")
            for dp in analysis_result['data_points'][:5]:
                st.write(f"• {dp['type']}: {dp['value']} ({dp['context']})")
        
        with col2:
            st.subheader("🔑 주요 토픽")
            for topic in analysis_result['key_topics']:
                st.write(f"• {topic}")
            
            st.subheader("👥 타겟 청중")
            st.write(analysis_result['target_audience'])
        
        # 다음 단계 버튼
        if st.button("→ Stage 2로 이동", type="primary"):
            st.switch_page("pages/2_🏗️_구조설계.py")
    else:
        st.error("⚠️ 파일을 업로드하거나 텍스트를 입력하세요")
Step 1.3: 진행률 추적 컴포넌트
파일: frontend/components/progress_tracker.py
pythonimport streamlit as st

def render_progress_tracker(current_stage: int):
    """5단계 진행률 표시"""
    stages = [
        {"num": 1, "name": "문서분석", "icon": "📄"},
        {"num": 2, "name": "구조설계", "icon": "🏗️"},
        {"num": 3, "name": "콘텐츠생성", "icon": "✍️"},
        {"num": 4, "name": "디자인적용", "icon": "🎨"},
        {"num": 5, "name": "품질검토", "icon": "✅"}
    ]
    
    # 프로그레스 바
    progress = current_stage / 5
    st.progress(progress)
    
    # 단계별 아이콘 표시
    cols = st.columns(5)
    for i, stage in enumerate(stages):
        with cols[i]:
            if stage['num'] < current_stage:
                st.markdown(f"✅ {stage['icon']}")
            elif stage['num'] == current_stage:
                st.markdown(f"🔄 {stage['icon']}")
            else:
                st.markdown(f"⏳ {stage['icon']}")
            st.caption(stage['name'])

Phase 2: 나머지 Stage UI 구현 (Week 2-3)
Step 2.1: Stage 2 UI (구조 설계)
핵심 기능:

MECE 프레임워크 선택 UI
슬라이드 아웃라인 트리뷰
레이아웃 미리보기
드래그 앤 드롭으로 순서 조정

Step 2.2: Stage 3 UI (콘텐츠 생성)
핵심 기능:

실시간 생성 진행률 표시
슬라이드별 콘텐츠 미리보기
수동 편집 가능
인사이트 래더 시각화

Step 2.3: Stage 4 UI (디자인 적용)
핵심 기능:

슬라이드 썸네일 그리드
클릭하여 상세 보기
검증 결과 실시간 표시
자동 수정 로그

Step 2.4: Stage 5 UI (품질 검토)
핵심 기능:

레이더 차트로 5가지 기준 시각화
개선 제안 리스트
반복 개선 이력
최종 다운로드 버튼


🎯 우선순위 및 실행 순서
Week 1: MVP 구축
Day 1-2: Step 1.1, 1.2 (Stage 1 UI)
Day 3-4: Step 1.3 + Stage 2 UI 기본
Day 5: 통합 테스트 및 디버깅
Week 2: 핵심 기능 완성
Day 1-2: Stage 3 UI
Day 3-4: Stage 4 UI
Day 5: Stage 5 UI
Week 3: 최적화 및 배포
Day 1-2: 성능 최적화, 에러 핸들링
Day 3-4: UI/UX 개선, 사용자 테스트
Day 5: 문서화 및 배포

📋 체크리스트 (Claude Code 실행 전)
환경 확인

 Python 3.9+ 설치 확인
 D:\PPT_Designer_OK 경로 접근 가능
 필수 패키지 설치 (requirements.txt 확인)
 기존 백엔드 모듈 정상 작동 확인

개발 준비

 Streamlit 설치: pip install streamlit
 개발 브랜치 생성: git checkout -b feature/workflow-ui
 .gitignore 업데이트 (Streamlit 캐시 제외)

실행 테스트
bash# Streamlit 앱 실행
cd D:\PPT_Designer_OK\frontend
streamlit run app.py

# 브라우저에서 http://localhost:8501 열림

🚨 주의사항 및 베스트 프랙티스
1. 세션 상태 관리
python# 각 단계의 결과를 세션에 저장
if 'stage1_result' not in st.session_state:
    st.session_state['stage1_result'] = None

# 다음 단계로 넘어가기 전 검증
if st.session_state['stage1_result'] is None:
    st.error("⚠️ Stage 1을 먼저 완료하세요")
    st.stop()
2. 에러 핸들링
pythontry:
    result = agent.process(data)
except Exception as e:
    st.error(f"❌ 처리 중 오류: {str(e)}")
    st.exception(e)  # 디버깅용 상세 에러
    st.stop()
3. 성능 최적화
python# 비용 절약: LLM 결과 캐싱
@st.cache_data
def analyze_document(content):
    return strategist.analyze(content)

# 파일 업로드 크기 제한
uploaded_file = st.file_uploader(
    "파일 업로드",
    type=['docx', 'pdf'],
    help="최대 10MB"
)
if uploaded_file and uploaded_file.size > 10 * 1024 * 1024:
    st.error("파일 크기가 10MB를 초과합니다")
4. 디버깅 모드
python# 개발자 모드 토글
if st.sidebar.checkbox("🔧 디버그 모드"):
    st.sidebar.json(st.session_state)
    st.sidebar.write("분석 결과:", analysis_result)