🎯 Claude Code 작업지시서 #1
품질 점수 0.503 → 0.85+ 개선 작업
📋 작업 개요

목적: PPT 생성 품질 개선 (타이틀, 차트, 스타일 적용)
예상 소요시간: 2-3시간
난이도: 중급
영향 범위: 3개 파일 수정


🔥 Priority 1: 타이틀 추가 (최우선)
파일: app/services/pptx_generator.py
현재 문제
python# 모든 슬라이드가 Blank 레이아웃으로 생성되어 타이틀 placeholder가 없음
# 결과: 11장 중 0장에만 타이틀 존재 (0%)
구현 요구사항
Step 1: 레이아웃 선택 메서드 추가
pythondef add_slide(self, layout_type: str = "title_and_content"):
    """
    레이아웃 타입별 슬라이드 추가
    
    Args:
        layout_type: "title" | "title_and_content" | "section_header" | "blank"
    
    Returns:
        Slide 객체
    """
    layout_map = {
        "title": 0,              # 첫 슬라이드용
        "title_and_content": 1,  # 일반 슬라이드용 (기본값)
        "section_header": 2,     # 섹션 구분용
        "blank": 6               # 특수 레이아웃용
    }
    
    layout_idx = layout_map.get(layout_type, 1)
    layout = self.prs.slide_layouts[layout_idx]
    return self.prs.slides.add_slide(layout)
Step 2: 타이틀 추가 메서드 강화
pythondef add_title_to_slide(self, slide, title_text: str):
    """
    슬라이드에 타이틀 추가 (3단계 폴백 시스템)
    
    Priority:
    1. Title placeholder 사용
    2. 기존 textbox 재활용
    3. 새 textbox 생성
    """
    
    # 1단계: Title placeholder 찾기
    for shape in slide.shapes:
        if shape.is_placeholder:
            phf = shape.placeholder_format
            if phf.type == 1:  # PP_PLACEHOLDER.TITLE
                shape.text = title_text
                self._apply_title_style(shape)
                return True
    
    # 2단계: 기존 textbox 재활용
    for shape in slide.shapes:
        if shape.has_text_frame and shape.top < Inches(1.0):
            shape.text = title_text
            self._apply_title_style(shape)
            return True
    
    # 3단계: 새 textbox 생성
    left = Inches(0.5)
    top = Inches(0.3)
    width = Inches(9.0)
    height = Inches(0.7)
    
    txBox = slide.shapes.add_textbox(left, top, width, height)
    tf = txBox.text_frame
    tf.text = title_text
    self._apply_title_style(txBox)
    
    return True

def _apply_title_style(self, shape):
    """McKinsey 타이틀 스타일 적용"""
    if not shape.has_text_frame:
        return
    
    text_frame = shape.text_frame
    for paragraph in text_frame.paragraphs:
        paragraph.alignment = PP_ALIGN.LEFT
        
        for run in paragraph.runs:
            run.font.name = 'Arial'
            run.font.size = Pt(24)
            run.font.bold = True
            run.font.color.rgb = RGBColor(0, 118, 168)  # McKinsey Blue
Step 3: 기존 generate_presentation() 메서드 수정
pythondef generate_presentation(self, slides_data: List[Dict]) -> str:
    """
    프레젠테이션 생성 (타이틀 적용 강화)
    """
    for i, slide_data in enumerate(slides_data):
        # 레이아웃 결정
        if i == 0:
            layout_type = "title"
        elif slide_data.get('type') == 'section':
            layout_type = "section_header"
        else:
            layout_type = "title_and_content"
        
        # 슬라이드 추가
        slide = self.add_slide(layout_type)
        
        # 타이틀 추가 (필수!)
        title = slide_data.get('title') or slide_data.get('headline') or f"Slide {i+1}"
        self.add_title_to_slide(slide, title)
        
        # 콘텐츠 추가
        content = slide_data.get('content', [])
        self._add_content_to_slide(slide, content)
    
    # 저장...
검증 방법
python# 테스트 코드
pptx = Presentation('output.pptx')
titles_found = 0

for slide in pptx.slides:
    for shape in slide.shapes:
        if shape.has_text_frame:
            text = shape.text.strip()
            if text and shape.top < Inches(1.0):
                titles_found += 1
                break

print(f"타이틀 있는 슬라이드: {titles_found}/{len(pptx.slides)}")
# 목표: 100% (11/11)

🔥 Priority 2: 차트 생성 및 삽입
파일: app/services/chart_generator.py + workflow_orchestrator.py
현재 문제
python# ChartGenerator가 호출되지 않거나
# 생성된 차트가 슬라이드에 추가되지 않음
# 결과: 총 차트 수 0개
구현 요구사항
Step 1: chart_generator.py 강화
pythonimport matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # GUI 없는 환경용
from typing import Dict, List
import os

class ChartGenerator:
    """McKinsey 스타일 차트 생성"""
    
    def __init__(self):
        self.output_dir = "temp_charts"
        os.makedirs(self.output_dir, exist_ok=True)
        
        # McKinsey 색상 팔레트
        self.colors = {
            'primary': '#0076A8',
            'secondary': '#F47621',
            'positive': '#6BA644',
            'negative': '#E31B23',
            'neutral': '#53565A'
        }
    
    def generate_chart(self, chart_spec: Dict) -> str:
        """
        차트 생성 및 이미지 파일 경로 반환
        
        Args:
            chart_spec: {
                'type': 'bar' | 'line' | 'pie' | 'waterfall',
                'data': {...},
                'title': str
            }
        
        Returns:
            이미지 파일 절대 경로
        """
        chart_type = chart_spec.get('type', 'bar')
        
        if chart_type == 'bar':
            return self._create_bar_chart(chart_spec)
        elif chart_type == 'line':
            return self._create_line_chart(chart_spec)
        elif chart_type == 'pie':
            return self._create_pie_chart(chart_spec)
        elif chart_type == 'waterfall':
            return self._create_waterfall_chart(chart_spec)
        else:
            return self._create_bar_chart(chart_spec)
    
    def _create_bar_chart(self, spec: Dict) -> str:
        """막대 차트 생성"""
        fig, ax = plt.subplots(figsize=(8, 5))
        
        data = spec.get('data', {})
        categories = data.get('categories', ['A', 'B', 'C'])
        values = data.get('values', [10, 20, 30])
        
        # McKinsey 스타일 적용
        bars = ax.bar(categories, values, color=self.colors['primary'])
        
        # 값 레이블 추가
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height,
                   f'{height:.0f}',
                   ha='center', va='bottom', fontsize=10)
        
        # 스타일 설정
        ax.set_title(spec.get('title', ''), fontsize=14, fontweight='bold')
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.grid(axis='y', alpha=0.3)
        
        # 저장
        filepath = os.path.join(self.output_dir, f"chart_{spec.get('id', 'temp')}.png")
        plt.tight_layout()
        plt.savefig(filepath, dpi=150, bbox_inches='tight')
        plt.close()
        
        return os.path.abspath(filepath)
    
    def _create_line_chart(self, spec: Dict) -> str:
        """선 차트 생성 (구현 유사)"""
        # ... 막대 차트와 유사하게 구현
        pass
    
    def _create_waterfall_chart(self, spec: Dict) -> str:
        """워터폴 차트 생성 (McKinsey 필수)"""
        # ... 구현
        pass
Step 2: workflow_orchestrator.py 수정
pythonasync def _execute_design_application(self, context: Dict) -> Dict:
    """
    디자인 적용 단계 - 차트 생성 추가!
    """
    logger.info("=== Design Application Stage ===")
    
    # 기존 코드...
    design_result = await self.design_applicator.apply_design(...)
    
    # ★★★ 차트 생성 추가 ★★★
    chart_specs = context.get('data_analyst_result', {}).get('visualizations', [])
    
    if chart_specs:
        logger.info(f"차트 생성 시작: {len(chart_specs)}개")
        chart_generator = ChartGenerator()
        
        chart_images = []
        for i, chart_spec in enumerate(chart_specs):
            try:
                chart_spec['id'] = f"chart_{i+1}"
                image_path = chart_generator.generate_chart(chart_spec)
                chart_images.append({
                    'path': image_path,
                    'slide_index': chart_spec.get('slide_index', i + 2),  # 2번째 슬라이드부터
                    'title': chart_spec.get('title', '')
                })
                logger.info(f"차트 생성 성공: {image_path}")
            except Exception as e:
                logger.error(f"차트 생성 실패: {e}")
        
        design_result['chart_images'] = chart_images
    
    return design_result
Step 3: pptx_generator.py에 차트 삽입 메서드 추가
pythondef add_chart_to_slide(self, slide, chart_image_path: str, position: str = "center"):
    """
    슬라이드에 차트 이미지 추가
    
    Args:
        position: "center" | "right" | "left"
    """
    if not os.path.exists(chart_image_path):
        logger.error(f"차트 이미지 없음: {chart_image_path}")
        return False
    
    # 위치 계산
    if position == "center":
        left = Inches(1.5)
        top = Inches(2.0)
        width = Inches(7.0)
        height = Inches(4.0)
    elif position == "right":
        left = Inches(5.5)
        top = Inches(1.5)
        width = Inches(4.0)
        height = Inches(4.5)
    else:  # left
        left = Inches(0.5)
        top = Inches(1.5)
        width = Inches(4.0)
        height = Inches(4.5)
    
    try:
        slide.shapes.add_picture(chart_image_path, left, top, width, height)
        return True
    except Exception as e:
        logger.error(f"차트 추가 실패: {e}")
        return False

def generate_presentation(self, slides_data: List[Dict], chart_images: List[Dict] = None):
    """
    프레젠테이션 생성 (차트 포함)
    """
    for i, slide_data in enumerate(slides_data):
        slide = self.add_slide(...)
        self.add_title_to_slide(slide, title)
        self._add_content_to_slide(slide, content)
        
        # ★★★ 차트 추가 ★★★
        if chart_images:
            for chart in chart_images:
                if chart.get('slide_index') == i:
                    self.add_chart_to_slide(slide, chart['path'], position="center")
검증 방법
python# 차트 개수 확인
chart_count = 0
for slide in pptx.slides:
    for shape in slide.shapes:
        if shape.shape_type == 13:  # PICTURE
            chart_count += 1

print(f"총 차트 수: {chart_count}개")
# 목표: 최소 3개 이상

🔥 Priority 3: McKinsey 스타일 강제 적용
파일: app/agents/design_agent.py
구현 요구사항
pythonclass DesignAgent(BaseAgent):
    
    async def process(self, input_data: Dict, context: Dict) -> Dict:
        """
        디자인 처리 - McKinsey 스타일 강제 적용
        """
        result = await super().process(input_data, context)
        
        # ★★★ 모든 슬라이드 강제 검증 ★★★
        slides_data = result.get('enhanced_slides', [])
        
        for slide_data in slides_data:
            # 1. 타이틀 필수 확인
            if not slide_data.get('title') and not slide_data.get('headline'):
                slide_data['title'] = self._generate_default_title(slide_data)
            
            # 2. 차트 추가 판단
            if self._should_add_chart(slide_data):
                chart_spec = self._create_chart_spec(slide_data)
                slide_data['chart'] = chart_spec
            
            # 3. McKinsey 스타일 메타데이터 추가
            slide_data['style'] = {
                'font': 'Arial',
                'title_size': 24,
                'body_size': 14,
                'color': '#0076A8',
                'layout': slide_data.get('layout', 'title_and_content')
            }
        
        return result
    
    def _should_add_chart(self, slide_data: Dict) -> bool:
        """차트 추가 여부 판단"""
        content = slide_data.get('content', [])
        
        # 숫자 데이터가 3개 이상 있으면 차트 추가
        numbers_count = sum(1 for item in content if self._contains_numbers(str(item)))
        
        return numbers_count >= 3
    
    def _create_chart_spec(self, slide_data: Dict) -> Dict:
        """차트 스펙 생성"""
        return {
            'type': 'bar',  # 기본값
            'data': self._extract_chart_data(slide_data),
            'title': slide_data.get('title', '')
        }
```

---

## ✅ 전체 작업 체크리스트

### 수정할 파일 (3개)
```
1. ✅ app/services/pptx_generator.py
   - add_slide() 메서드 추가
   - add_title_to_slide() 강화
   - _apply_title_style() 추가
   - add_chart_to_slide() 추가
   - generate_presentation() 수정

2. ✅ app/services/chart_generator.py
   - ChartGenerator 클래스 강화
   - _create_bar_chart() 구현
   - _create_line_chart() 구현
   - _create_waterfall_chart() 구현

3. ✅ app/services/workflow_orchestrator.py
   - _execute_design_application() 수정
   - 차트 생성 파이프라인 추가

4. ✅ app/agents/design_agent.py
   - process() 메서드 강화
   - _should_add_chart() 추가
   - _create_chart_spec() 추가
테스트 단계
bash# 1. Docker 재빌드
docker-compose down
docker-compose up --build -d

# 2. E2E 테스트
python examples/test_e2e_simple.py

# 3. 결과 확인
# - 타이틀: 11/11장 (100%)
# - 차트: 3개 이상
# - 품질 점수: 0.85 이상
```

---

## 📊 예상 개선 결과
```
현재: 0.503
목표: 0.850

수정 후 예상:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1. Clarity:        0.40 → 0.90 (+0.50) ✅
2. Visual:         0.30 → 0.85 (+0.55) ✅
3. Structure:      0.70 (유지)         ✅
4. Insight:        0.60 → 0.75 (+0.15) ✅
5. Actionability:  0.80 (유지)         ✅
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
최종 예상: 0.84 ✅ (목표 달성!)

이 작업지시서를 Claude Code에게 제공하면, 단계별로 명확한 가이드를 따라 코드를 수정할 수 있습니다.
시작하시겠습니까? 🚀재시도Claude는 실수를 할 수 있습니다. 응답을 반드시 다시 확인해 주세요.PPT_생성엔진 구축 프로젝트 Sonnet 4.5