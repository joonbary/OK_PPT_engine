 Task 4.1: 전체 콘텐츠 생성 워크플로우 통합
📋 작업 개요
Task ID: workflow-integration-phase4.1
우선순위: 🔴 Critical
예상 소요시간: 3-4일
담당: Claude Code (Full-stack Developer + Designer)

🎨 작업 목표
Enhanced SlideFixer와 기존 모든 컴포넌트를 통합하여 완전한 End-to-End PPT 생성 파이프라인을 구축합니다.
핵심 통합 포인트

✅ SlideValidator (완료) → 이슈 탐지
✅ Enhanced SlideFixer (완료) → 자동 수정
🔄 ContentGenerator → 슬라이드 콘텐츠 생성
🔄 DesignApplicator → McKinsey 스타일 적용
🔄 QualityController → 전체 품질 보증


📂 프로젝트 구조 분석
현재 D:\PPT_Designer_OK 구조:
D:\PPT_Designer_OK/
├── app/
│   ├── agents/              # ✅ 완료
│   │   ├── __init__.py
│   │   ├── base_agent.py
│   │   ├── strategist_agent.py
│   │   ├── data_analyst_agent.py
│   │   └── ... (기타 에이전트)
│   │
│   ├── core/                # 🔄 통합 필요
│   │   ├── slide_validator.py    # ✅ 완료
│   │   ├── slide_fixer.py        # ✅ 완료 (Task 3.2)
│   │   ├── text_fitter.py        # ✅ 완료
│   │   └── pptx_generator.py     # 🔄 통합 필요
│   │
│   ├── services/            # 🆕 신규 생성
│   │   ├── __init__.py
│   │   ├── workflow_orchestrator.py    # 🆕 핵심!
│   │   ├── content_generator.py        # 🆕
│   │   ├── design_applicator.py        # 🆕
│   │   └── quality_controller.py       # 🆕
│   │
│   ├── models/              # 🔄 확장
│   │   ├── workflow_models.py          # 🆕
│   │   ├── generation_request.py       # 🆕
│   │   └── generation_response.py      # 🆕
│   │
│   └── templates/           # ✅ 기존 유지
│       └── mckinsey_templates/
│
├── tests/                   # 🆕 통합 테스트
│   ├── integration/
│   │   └── test_workflow_integration.py
│   └── e2e/
│       └── test_full_pipeline.py
│
└── examples/                # 🆕 데모
    └── generate_demo_ppt.py

🔧 구현 계획
Phase 1: 워크플로우 오케스트레이터 구축 (Day 1)
1.1 WorkflowOrchestrator 클래스 설계
파일: app/services/workflow_orchestrator.py
python"""
통합 워크플로우 오케스트레이터
- 6단계 파이프라인 실행
- 각 단계별 검증 및 수정
- 반복 개선 로직
"""

from typing import Dict, List, Optional
from dataclasses import dataclass
from enum import Enum
import logging

from app.core.slide_validator import SlideValidator, ValidationResult
from app.core.slide_fixer import SlideFixer, FixResult
from app.services.content_generator import ContentGenerator
from app.services.design_applicator import DesignApplicator
from app.services.quality_controller import QualityController


class WorkflowStage(Enum):
    """워크플로우 단계"""
    INITIALIZATION = "initialization"
    CONTENT_GENERATION = "content_generation"
    DESIGN_APPLICATION = "design_application"
    VALIDATION = "validation"
    AUTO_FIX = "auto_fix"
    QUALITY_ASSURANCE = "quality_assurance"
    FINALIZATION = "finalization"


@dataclass
class StageResult:
    """단계별 결과"""
    stage: WorkflowStage
    success: bool
    data: Dict
    metrics: Dict
    issues: List[str]
    execution_time: float


class WorkflowOrchestrator:
    """
    End-to-End PPT 생성 워크플로우 오케스트레이터
    
    Pipeline:
    1. Initialization - 요청 분석 및 설정
    2. Content Generation - 슬라이드 콘텐츠 생성
    3. Design Application - McKinsey 스타일 적용
    4. Validation - SlideValidator로 품질 검증
    5. Auto Fix - SlideFixer로 이슈 자동 수정
    6. Quality Assurance - 최종 품질 보증
    7. Finalization - PPTX 파일 생성
    """
    
    def __init__(
        self,
        max_iterations: int = 3,
        target_quality_score: float = 0.85,
        aggressive_fix: bool = True
    ):
        self.max_iterations = max_iterations
        self.target_quality_score = target_quality_score
        self.aggressive_fix = aggressive_fix
        
        # 핵심 컴포넌트 초기화
        self.content_generator = ContentGenerator()
        self.design_applicator = DesignApplicator()
        self.validator = SlideValidator()
        self.fixer = SlideFixer(aggressive=aggressive_fix)
        self.quality_controller = QualityController()
        
        self.logger = logging.getLogger(__name__)
    
    async def execute(self, request: 'GenerationRequest') -> 'GenerationResponse':
        """
        전체 워크플로우 실행
        
        Returns:
            GenerationResponse: 생성 결과 (PPTX 경로, 품질 점수, 메트릭)
        """
        context = {
            "request": request,
            "stage_results": [],
            "current_iteration": 0
        }
        
        try:
            # Stage 1: Initialization
            await self._execute_stage(WorkflowStage.INITIALIZATION, context)
            
            # 반복 개선 루프
            while context["current_iteration"] < self.max_iterations:
                # Stage 2: Content Generation
                await self._execute_stage(WorkflowStage.CONTENT_GENERATION, context)
                
                # Stage 3: Design Application
                await self._execute_stage(WorkflowStage.DESIGN_APPLICATION, context)
                
                # Stage 4: Validation
                validation_result = await self._execute_stage(
                    WorkflowStage.VALIDATION, 
                    context
                )
                
                # Stage 5: Auto Fix
                if validation_result.data.get("has_issues"):
                    fix_result = await self._execute_stage(
                        WorkflowStage.AUTO_FIX, 
                        context
                    )
                    
                    # 수정 후 재검증
                    if fix_result.success:
                        continue
                
                # Stage 6: Quality Assurance
                qa_result = await self._execute_stage(
                    WorkflowStage.QUALITY_ASSURANCE, 
                    context
                )
                
                # 목표 품질 달성 시 종료
                if qa_result.data.get("quality_score", 0) >= self.target_quality_score:
                    break
                
                context["current_iteration"] += 1
            
            # Stage 7: Finalization
            final_result = await self._execute_stage(
                WorkflowStage.FINALIZATION, 
                context
            )
            
            return self._build_response(context, final_result)
            
        except Exception as e:
            self.logger.error(f"Workflow execution failed: {e}")
            raise
핵심 기능:

✅ 6단계 파이프라인 자동 실행
✅ ValidationResult → FixResult 자동 연계
✅ 반복 개선 (최대 3회)
✅ 목표 품질 점수 달성 시 조기 종료
✅ 각 단계별 메트릭 수집


Phase 2: ContentGenerator 구현 (Day 1-2)
2.1 ContentGenerator 클래스
파일: app/services/content_generator.py
python"""
슬라이드 콘텐츠 생성기
- 에이전트 기반 콘텐츠 생성
- MECE 구조 적용
- 데이터 시각화 선택
"""

from typing import Dict, List
from pptx import Presentation
from pptx.util import Inches, Pt

from app.agents.strategist_agent import StrategistAgent
from app.agents.data_analyst_agent import DataAnalystAgent
from app.agents.storyteller_agent import StorytellerAgent


class ContentGenerator:
    """
    Multi-Agent 기반 슬라이드 콘텐츠 생성
    
    Pipeline:
    1. StrategistAgent - 전체 구조 설계 (MECE, Pyramid)
    2. DataAnalystAgent - 데이터 분석 및 차트 선택
    3. StorytellerAgent - 스토리라인 및 메시지 구성
    """
    
    def __init__(self):
        self.strategist = StrategistAgent()
        self.analyst = DataAnalystAgent()
        self.storyteller = StorytellerAgent()
    
    async def generate(
        self, 
        document: str,
        num_slides: int = 15,
        target_audience: str = "executive"
    ) -> Presentation:
        """
        문서에서 PPT 콘텐츠 생성
        
        Args:
            document: 입력 문서 (텍스트)
            num_slides: 생성할 슬라이드 수
            target_audience: 타겟 청중
        
        Returns:
            Presentation: 콘텐츠가 추가된 프레젠테이션
        """
        # 1. 전략 분석
        structure = await self.strategist.analyze_and_structure(
            document=document,
            num_slides=num_slides
        )
        
        # 2. 데이터 분석
        data_insights = await self.analyst.extract_insights(
            document=document,
            structure=structure
        )
        
        # 3. 스토리라인 구성
        storyline = await self.storyteller.create_storyline(
            structure=structure,
            insights=data_insights,
            audience=target_audience
        )
        
        # 4. 프레젠테이션 생성
        prs = Presentation()
        
        for slide_spec in storyline["slides"]:
            slide = self._create_slide(prs, slide_spec)
        
        return prs
    
    def _create_slide(self, prs: Presentation, spec: Dict) -> 'Slide':
        """슬라이드 생성 (템플릿 기반)"""
        # 레이아웃 선택
        layout = self._select_layout(spec["type"])
        slide = prs.slides.add_slide(layout)
        
        # 제목 추가
        if "title" in spec:
            title = slide.shapes.title
            title.text = spec["title"]
        
        # 콘텐츠 추가
        if "content" in spec:
            self._add_content(slide, spec["content"])
        
        # 차트 추가
        if "chart" in spec:
            self._add_chart(slide, spec["chart"])
        
        return slide
구현 포인트:

✅ 기존 Agent 시스템 활용
✅ MECE 구조 자동 적용
✅ python-pptx로 슬라이드 생성
🔄 Template 시스템과 통합


Phase 3: DesignApplicator 구현 (Day 2)
3.1 DesignApplicator 클래스
파일: app/services/design_applicator.py
python"""
McKinsey 디자인 스타일 적용기
- 색상 팔레트
- 폰트 시스템
- 레이아웃 표준
"""

from typing import Dict
from pptx import Presentation
from pptx.util import Pt, Inches
from pptx.enum.text import PP_ALIGN
from pptx.dml.color import RGBColor


class DesignApplicator:
    """
    McKinsey 표준 디자인 적용
    
    - 색상: McKinsey Blue (#0076A8)
    - 폰트: Arial 표준화
    - 여백: 0.3인치
    - 정렬: 좌측 정렬
    """
    
    MCKINSEY_COLORS = {
        "primary": RGBColor(0, 118, 168),      # #0076A8
        "secondary": RGBColor(244, 118, 33),   # #F47621
        "text": RGBColor(83, 86, 90),          # #53565A
        "positive": RGBColor(107, 166, 68),    # #6BA644
        "negative": RGBColor(227, 27, 35)      # #E31B23
    }
    
    MCKINSEY_FONTS = {
        "title": {"size": Pt(18), "bold": True},
        "body": {"size": Pt(14), "bold": False},
        "caption": {"size": Pt(10), "bold": False}
    }
    
    MCKINSEY_MARGINS = Inches(0.3)
    
    async def apply(self, prs: Presentation) -> Presentation:
        """
        전체 프레젠테이션에 McKinsey 스타일 적용
        
        Returns:
            Presentation: 스타일이 적용된 프레젠테이션
        """
        for slide in prs.slides:
            # 1. 색상 적용
            self._apply_colors(slide)
            
            # 2. 폰트 적용
            self._apply_fonts(slide)
            
            # 3. 여백 적용
            self._apply_margins(slide)
            
            # 4. 정렬 표준화
            self._standardize_alignment(slide)
        
        return prs
    
    def _apply_fonts(self, slide: 'Slide'):
        """슬라이드 폰트 표준화"""
        for shape in slide.shapes:
            if not shape.has_text_frame:
                continue
            
            for paragraph in shape.text_frame.paragraphs:
                for run in paragraph.runs:
                    run.font.name = "Arial"
                    
                    # 레벨별 크기 적용
                    if paragraph.level == 0:
                        run.font.size = self.MCKINSEY_FONTS["title"]["size"]
                    elif paragraph.level == 1:
                        run.font.size = self.MCKINSEY_FONTS["body"]["size"]
                    else:
                        run.font.size = self.MCKINSEY_FONTS["caption"]["size"]
구현 포인트:

✅ McKinsey 색상 자동 적용
✅ 4단계 폰트 표준화
✅ 0.3인치 여백 강제
✅ 좌측 정렬 표준


Phase 4: QualityController 구현 (Day 2-3)
4.1 QualityController 클래스
파일: app/services/quality_controller.py
python"""
품질 보증 컨트롤러
- 5가지 품질 기준 평가
- 가중 평균 점수 계산
- 개선 제안 생성
"""

from typing import Dict, List
from dataclasses import dataclass
from pptx import Presentation

from app.core.slide_validator import SlideValidator, ValidationResult


@dataclass
class QualityScore:
    """품질 점수"""
    clarity: float       # 명확성 (20%)
    insight: float       # 인사이트 (25%)
    structure: float     # 구조 (20%)
    visual: float        # 시각 (15%)
    actionability: float # 실행가능성 (20%)
    total: float         # 가중 평균
    passed: bool         # 목표 달성 여부


class QualityController:
    """
    PPT 품질 평가 및 보증
    
    Criteria:
    1. Clarity - So What 테스트, 헤드라인 명확성
    2. Insight - 데이터 기반 인사이트 깊이
    3. Structure - MECE, Pyramid 구조
    4. Visual - 디자인 일관성, 가독성
    5. Actionability - 실행 가능한 권고사항
    """
    
    WEIGHTS = {
        "clarity": 0.20,
        "insight": 0.25,
        "structure": 0.20,
        "visual": 0.15,
        "actionability": 0.20
    }
    
    def __init__(self, target_score: float = 0.85):
        self.target_score = target_score
        self.validator = SlideValidator()
    
    async def evaluate(self, prs: Presentation) -> QualityScore:
        """
        프레젠테이션 품질 평가
        
        Returns:
            QualityScore: 각 기준별 점수 및 총점
        """
        scores = {}
        
        # 1. Clarity 평가
        scores["clarity"] = self._evaluate_clarity(prs)
        
        # 2. Insight 평가
        scores["insight"] = self._evaluate_insight(prs)
        
        # 3. Structure 평가
        scores["structure"] = self._evaluate_structure(prs)
        
        # 4. Visual 평가 (SlideValidator 활용)
        visual_issues = []
        for slide in prs.slides:
            result = self.validator.validate(slide)
            visual_issues.extend(result.issues)
        
        scores["visual"] = 1.0 - (len(visual_issues) / (len(prs.slides) * 10))
        scores["visual"] = max(0.0, min(1.0, scores["visual"]))
        
        # 5. Actionability 평가
        scores["actionability"] = self._evaluate_actionability(prs)
        
        # 가중 평균 계산
        total = sum(
            scores[criterion] * weight 
            for criterion, weight in self.WEIGHTS.items()
        )
        
        return QualityScore(
            clarity=scores["clarity"],
            insight=scores["insight"],
            structure=scores["structure"],
            visual=scores["visual"],
            actionability=scores["actionability"],
            total=total,
            passed=total >= self.target_score
        )

Phase 5: 통합 테스트 (Day 3)
5.1 End-to-End 테스트
파일: tests/integration/test_workflow_integration.py
python"""
전체 워크플로우 통합 테스트
"""

import pytest
from app.services.workflow_orchestrator import WorkflowOrchestrator
from app.models.generation_request import GenerationRequest


@pytest.mark.asyncio
async def test_full_pipeline():
    """전체 파이프라인 E2E 테스트"""
    
    # Given: 테스트 문서
    document = """
    우리 회사는 2024년 매출 10% 성장을 목표로 합니다.
    주요 전략은 신제품 출시와 해외 시장 진출입니다.
    """
    
    request = GenerationRequest(
        document=document,
        num_slides=10,
        target_audience="executive"
    )
    
    # When: 워크플로우 실행
    orchestrator = WorkflowOrchestrator()
    response = await orchestrator.execute(request)
    
    # Then: 결과 검증
    assert response.success
    assert response.quality_score >= 0.85
    assert response.pptx_path.exists()
    assert len(response.slides) == 10
    
    # 각 슬라이드 검증
    for slide_result in response.slides:
        assert slide_result.validation_passed
        assert slide_result.fix_applied

📊 성공 기준
기능 요구사항

✅ 전체 6단계 파이프라인 자동 실행
✅ ValidationResult → FixResult 자동 연계
✅ 목표 품질 점수(0.85) 달성
✅ 반복 개선 (최대 3회)
✅ McKinsey 스타일 100% 적용

성능 요구사항

⏱️ 15장 PPT 생성: 5분 이내
⏱️ 단일 슬라이드 생성: 20초 이내
⏱️ 전체 파이프라인: 300초 이내

품질 요구사항

📊 품질 점수: 0.85 이상
🎯 자동 수정 성공률: 95% 이상
✨ McKinsey 표준 준수: 100%


🚀 실행 계획
Day 1: WorkflowOrchestrator + ContentGenerator
bash# 1. WorkflowOrchestrator 골격 구현
# 2. ContentGenerator 기본 구현
# 3. 단위 테스트 작성
Day 2: DesignApplicator + QualityController
bash# 1. DesignApplicator McKinsey 스타일 적용
# 2. QualityController 평가 로직 구현
# 3. 통합 테스트 시작
Day 3: 통합 및 E2E 테스트
bash# 1. 전체 파이프라인 통합
# 2. E2E 테스트 실행
# 3. 성능 최적화
# 4. 문서화
Day 4: 최적화 및 데모
bash# 1. 병렬 처리 최적화
# 2. 캐싱 적용
# 3. 데모 PPT 생성
# 4. 최종 검증

📝 체크리스트
Phase 1: 워크플로우 오케스트레이터

 workflow_orchestrator.py 생성
 6단계 파이프라인 구현
 반복 개선 로직 구현
 메트릭 수집 시스템

Phase 2: ContentGenerator

 content_generator.py 생성
 Agent 시스템 통합
 슬라이드 생성 로직
 단위 테스트

Phase 3: DesignApplicator

 design_applicator.py 생성
 McKinsey 색상 적용
 폰트 표준화
 여백 및 정렬 표준

Phase 4: QualityController

 quality_controller.py 생성
 5가지 평가 기준 구현
 가중 평균 계산
 개선 제안 생성

Phase 5: 통합 테스트

 E2E 테스트 작성
 성능 테스트
 품질 검증
 데모 PPT 생성


🎯 최종 목표
"입력 문서 → 5분 → McKinsey 수준 PPT"
완성 시 다음을 달성합니다:

✅ 완전 자동화된 PPT 생성 파이프라인
✅ ValidationResult → FixResult 완벽 통합
✅ McKinsey 표준 100% 준수
✅ 0.85 이상 품질 점수
✅ 5분 내 15장 PPT 생성