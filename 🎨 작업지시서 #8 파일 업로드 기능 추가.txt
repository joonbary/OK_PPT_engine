🎨 작업지시서 #8: 파일 업로드 기능 추가
대상: Claude Code
프로젝트: McKinsey PPT 자동 생성 시스템
작업 단계: Phase 7.1 - 파일 업로드 기능 추가
예상 소요 시간: 1-2시간

📋 작업 개요
목표
텍스트 입력 외에 Word(.docx), PDF(.pdf), Markdown(.md) 문서를 업로드하여 자동으로 내용을 추출하는 기능 추가
완료 조건

✅ 파일 드래그 앤 드롭 + 파일 선택 버튼 UI
✅ Word, PDF, Markdown 파일 업로드 및 파싱
✅ 파일 내용 자동 추출 → 텍스트 영역에 표시
✅ 파일 크기 제한 (10MB) 및 형식 검증
✅ 업로드 진행 상황 표시


🎨 UI 디자인 요구사항
1. 파일 업로드 영역 (Step 1에 추가)
┌─────────────────────────────────────────────┐
│  📄 비즈니스 문서 입력                        │
│  분석하고 싶은 문서를 입력하거나 업로드하세요  │
├─────────────────────────────────────────────┤
│                                             │
│  [탭] 텍스트 입력  |  [탭] 파일 업로드       │
│                                             │
│  ┌───────────────────────────────────────┐ │
│  │  [드래그 앤 드롭 영역]                 │ │
│  │                                       │ │
│  │  📁 파일을 드래그하거나               │ │
│  │     [파일 선택] 버튼을 클릭하세요      │ │
│  │                                       │ │
│  │  지원 형식: DOCX, PDF, MD             │ │
│  │  최대 크기: 10MB                      │ │
│  └───────────────────────────────────────┘ │
│                                             │
│  업로드된 파일: example.docx (2.3MB) ❌     │
│                                             │
└─────────────────────────────────────────────┘
2. 상태 표시
css/* 드래그 오버 시 */
.upload-area.drag-over {
    border: 2px dashed #0076A8;
    background: rgba(0, 118, 168, 0.05);
}

/* 업로드 중 */
.upload-progress {
    width: 100%;
    height: 4px;
    background: #E0E0E0;
}
.upload-progress-bar {
    background: linear-gradient(90deg, #0076A8, #F47621);
    animation: progress 1s ease-in-out;
}

/* 파일 정보 */
.file-info {
    display: flex;
    align-items: center;
    padding: 12px;
    background: #F8F9FA;
    border-radius: 8px;
}

📁 생성/수정할 파일 목록
1. 백엔드 파일
📄 app/services/document_parser.py (신규, 약 350줄)
python"""
문서 파일 파서
Word, PDF, Markdown 파일을 텍스트로 변환
"""

from typing import Optional
import docx  # python-docx
import PyPDF2
import markdown
from pathlib import Path


class DocumentParser:
    """문서 파일 파서"""
    
    SUPPORTED_FORMATS = ['.docx', '.pdf', '.md']
    MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB
    
    @staticmethod
    def parse_file(file_path: str) -> str:
        """
        파일 형식에 맞는 파서 선택 및 텍스트 추출
        
        Args:
            file_path: 파일 경로
            
        Returns:
            추출된 텍스트
            
        Raises:
            ValueError: 지원하지 않는 파일 형식
            IOError: 파일 읽기 오류
        """
        path = Path(file_path)
        
        # 파일 존재 확인
        if not path.exists():
            raise FileNotFoundError(f"파일을 찾을 수 없습니다: {file_path}")
        
        # 파일 크기 확인
        if path.stat().st_size > DocumentParser.MAX_FILE_SIZE:
            raise ValueError(f"파일 크기가 너무 큽니다 (최대 10MB)")
        
        # 확장자별 파싱
        ext = path.suffix.lower()
        
        if ext == '.docx':
            return DocumentParser._parse_docx(file_path)
        elif ext == '.pdf':
            return DocumentParser._parse_pdf(file_path)
        elif ext == '.md':
            return DocumentParser._parse_markdown(file_path)
        else:
            raise ValueError(f"지원하지 않는 파일 형식: {ext}")
    
    @staticmethod
    def _parse_docx(file_path: str) -> str:
        """Word 문서 파싱"""
        try:
            doc = docx.Document(file_path)
            
            # 모든 단락 추출
            paragraphs = [para.text for para in doc.paragraphs]
            
            # 표 내용 추출
            tables_text = []
            for table in doc.tables:
                for row in table.rows:
                    row_text = ' | '.join(cell.text for cell in row.cells)
                    tables_text.append(row_text)
            
            # 합치기
            full_text = '\n'.join(paragraphs)
            if tables_text:
                full_text += '\n\n[표 데이터]\n' + '\n'.join(tables_text)
            
            return full_text.strip()
            
        except Exception as e:
            raise IOError(f"Word 문서 파싱 실패: {str(e)}")
    
    @staticmethod
    def _parse_pdf(file_path: str) -> str:
        """PDF 문서 파싱"""
        try:
            with open(file_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                
                # 모든 페이지 텍스트 추출
                text_parts = []
                for page_num, page in enumerate(pdf_reader.pages, 1):
                    page_text = page.extract_text()
                    if page_text.strip():
                        text_parts.append(f"[Page {page_num}]\n{page_text}")
                
                return '\n\n'.join(text_parts).strip()
                
        except Exception as e:
            raise IOError(f"PDF 문서 파싱 실패: {str(e)}")
    
    @staticmethod
    def _parse_markdown(file_path: str) -> str:
        """Markdown 문서 파싱"""
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                md_content = file.read()
            
            # Markdown을 일반 텍스트로 변환 (HTML 태그 제거)
            html = markdown.markdown(md_content)
            
            # HTML 태그 제거 (간단한 방법)
            import re
            text = re.sub('<[^<]+?>', '', html)
            text = re.sub(r'\n\s*\n', '\n\n', text)  # 중복 개행 제거
            
            return text.strip()
            
        except Exception as e:
            raise IOError(f"Markdown 문서 파싱 실패: {str(e)}")
📄 app/api/v1/endpoints/upload.py (신규, 약 150줄)
python"""
파일 업로드 엔드포인트
"""

from fastapi import APIRouter, UploadFile, File, HTTPException
from fastapi.responses import JSONResponse
from pathlib import Path
import shutil
from typing import Dict
import uuid

from app.services.document_parser import DocumentParser
from app.core.config import settings

router = APIRouter()

# 업로드 디렉토리 설정
UPLOAD_DIR = Path("uploads")
UPLOAD_DIR.mkdir(exist_ok=True)


@router.post("/upload-document")
async def upload_document(
    file: UploadFile = File(...)
) -> Dict:
    """
    문서 파일 업로드 및 텍스트 추출
    
    지원 형식: DOCX, PDF, MD
    최대 크기: 10MB
    
    Returns:
        {
            "success": true,
            "text": "추출된 텍스트...",
            "filename": "example.docx",
            "file_size": 2345678,
            "format": "docx"
        }
    """
    
    # 파일 형식 검증
    file_ext = Path(file.filename).suffix.lower()
    if file_ext not in DocumentParser.SUPPORTED_FORMATS:
        raise HTTPException(
            status_code=400,
            detail=f"지원하지 않는 파일 형식입니다. 지원 형식: {', '.join(DocumentParser.SUPPORTED_FORMATS)}"
        )
    
    # 임시 파일로 저장
    file_id = str(uuid.uuid4())
    temp_path = UPLOAD_DIR / f"{file_id}{file_ext}"
    
    try:
        # 파일 저장
        with temp_path.open("wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
        
        # 파일 크기 확인
        file_size = temp_path.stat().st_size
        if file_size > DocumentParser.MAX_FILE_SIZE:
            temp_path.unlink()  # 파일 삭제
            raise HTTPException(
                status_code=400,
                detail=f"파일 크기가 너무 큽니다 (최대 10MB, 현재: {file_size / 1024 / 1024:.2f}MB)"
            )
        
        # 텍스트 추출
        extracted_text = DocumentParser.parse_file(str(temp_path))
        
        # 임시 파일 삭제
        temp_path.unlink()
        
        return {
            "success": True,
            "text": extracted_text,
            "filename": file.filename,
            "file_size": file_size,
            "format": file_ext[1:]  # '.docx' -> 'docx'
        }
        
    except Exception as e:
        # 에러 발생 시 임시 파일 삭제
        if temp_path.exists():
            temp_path.unlink()
        
        raise HTTPException(
            status_code=500,
            detail=f"파일 처리 중 오류 발생: {str(e)}"
        )


@router.get("/supported-formats")
async def get_supported_formats() -> Dict:
    """
    지원하는 파일 형식 목록 반환
    """
    return {
        "formats": DocumentParser.SUPPORTED_FORMATS,
        "max_size_mb": DocumentParser.MAX_FILE_SIZE / (1024 * 1024),
        "descriptions": {
            ".docx": "Microsoft Word 문서",
            ".pdf": "PDF 문서",
            ".md": "Markdown 문서"
        }
    }
📄 requirements.txt (수정 - 패키지 추가)
txt# 기존 패키지들...
fastapi==0.104.1
uvicorn==0.24.0
python-pptx==0.6.21
redis==5.0.1
pydantic==2.4.2

# 새로 추가
python-docx==1.1.0        # Word 문서 파싱
PyPDF2==3.0.1             # PDF 문서 파싱
markdown==3.5.1           # Markdown 파싱
2. 프론트엔드 파일
📄 frontend/index.html (수정 - Step 1 부분)
html<!-- Step 1: Document Input -->
<div class="card step-content active" id="step1">
    <div class="card-header">
        <h2><i class="fas fa-file-alt"></i> 비즈니스 문서 입력</h2>
        <p>분석하고 싶은 문서를 입력하거나 파일을 업로드하세요</p>
    </div>
    <div class="card-body">
        
        <!-- 탭 전환 -->
        <ul class="nav nav-tabs mb-4" id="inputTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="text-tab" data-bs-toggle="tab" 
                        data-bs-target="#text-input" type="button">
                    <i class="fas fa-keyboard"></i> 텍스트 입력
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="file-tab" data-bs-toggle="tab" 
                        data-bs-target="#file-upload" type="button">
                    <i class="fas fa-file-upload"></i> 파일 업로드
                </button>
            </li>
        </ul>

        <!-- 탭 콘텐츠 -->
        <div class="tab-content" id="inputTabContent">
            
            <!-- 텍스트 입력 탭 -->
            <div class="tab-pane fade show active" id="text-input">
                <div class="form-group">
                    <label for="documentInput">문서 내용</label>
                    <textarea 
                        id="documentInput" 
                        class="form-control document-textarea"
                        rows="12"
                        placeholder="예시:&#10;&#10;2024년 우리 회사의 매출은 1,000억원으로 전년 대비 20% 증가했습니다.&#10;이는 신제품 라인의 성공적인 출시와 해외 시장 확장 덕분입니다.&#10;&#10;주요 성과:&#10;- 아시아 시장 진출로 매출 300억원 달성&#10;- 신제품이 전체 매출의 40% 기여&#10;- 운영 효율화로 비용 15% 절감&#10;&#10;향후 계획:&#10;- 2025년 매출 목표 1,500억원 (50% 성장)&#10;- 유럽 시장 진출 예정"></textarea>
                    <div class="char-counter">
                        <span id="charCount">0</span> / 최소 100자
                    </div>
                </div>
            </div>
            
            <!-- 파일 업로드 탭 -->
            <div class="tab-pane fade" id="file-upload">
                <div class="upload-container">
                    <!-- 드래그 앤 드롭 영역 -->
                    <div class="upload-area" id="uploadArea">
                        <div class="upload-icon">
                            <i class="fas fa-cloud-upload-alt"></i>
                        </div>
                        <h3>파일을 드래그하거나</h3>
                        <button type="button" class="btn btn-outline-primary" id="selectFileBtn">
                            <i class="fas fa-folder-open"></i> 파일 선택
                        </button>
                        <input type="file" id="fileInput" accept=".docx,.pdf,.md" hidden>
                        <div class="upload-info">
                            <p><strong>지원 형식:</strong> DOCX, PDF, MD</p>
                            <p><strong>최대 크기:</strong> 10MB</p>
                        </div>
                    </div>

                    <!-- 업로드 진행 상황 -->
                    <div class="upload-progress-container" id="uploadProgress" style="display: none;">
                        <div class="upload-progress-bar">
                            <div class="upload-progress-fill" id="progressFill"></div>
                        </div>
                        <p class="upload-status" id="uploadStatus">파일 업로드 중...</p>
                    </div>

                    <!-- 업로드된 파일 정보 -->
                    <div class="file-info-container" id="fileInfo" style="display: none;">
                        <div class="file-info">
                            <div class="file-icon">
                                <i class="fas fa-file-alt"></i>
                            </div>
                            <div class="file-details">
                                <h4 id="fileName"></h4>
                                <p id="fileSize"></p>
                            </div>
                            <button type="button" class="btn-remove" id="removeFileBtn">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        <div class="file-preview">
                            <label>추출된 내용 미리보기:</label>
                            <div class="preview-text" id="previewText"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 다음 버튼 -->
        <div class="button-group mt-4">
            <button type="button" class="btn btn-primary btn-lg" id="nextStep1Btn" disabled>
                다음 단계 <i class="fas fa-arrow-right"></i>
            </button>
        </div>
    </div>
</div>
📄 frontend/css/style.css (추가 - 파일 업로드 스타일)
css/* ==========================================
   파일 업로드 스타일
   ========================================== */

/* 탭 스타일 */
.nav-tabs {
    border-bottom: 2px solid var(--border-light);
}

.nav-tabs .nav-link {
    color: var(--text-secondary);
    border: none;
    padding: 12px 24px;
    font-weight: 500;
    transition: all 0.3s ease;
}

.nav-tabs .nav-link:hover {
    color: var(--mckinsey-blue);
    border: none;
}

.nav-tabs .nav-link.active {
    color: var(--mckinsey-blue);
    background: transparent;
    border: none;
    border-bottom: 3px solid var(--mckinsey-blue);
}

/* 업로드 컨테이너 */
.upload-container {
    width: 100%;
}

/* 드래그 앤 드롭 영역 */
.upload-area {
    border: 2px dashed var(--border-light);
    border-radius: 12px;
    padding: 60px 40px;
    text-align: center;
    background: var(--background);
    transition: all 0.3s ease;
    cursor: pointer;
}

.upload-area:hover {
    border-color: var(--mckinsey-blue);
    background: rgba(0, 118, 168, 0.02);
}

.upload-area.drag-over {
    border-color: var(--mckinsey-blue);
    border-width: 3px;
    background: rgba(0, 118, 168, 0.05);
    transform: scale(1.02);
}

.upload-icon {
    font-size: 64px;
    color: var(--mckinsey-blue);
    margin-bottom: 20px;
}

.upload-area h3 {
    font-size: 20px;
    color: var(--text-primary);
    margin-bottom: 20px;
    font-weight: 600;
}

.upload-info {
    margin-top: 24px;
    color: var(--text-secondary);
    font-size: 14px;
}

.upload-info p {
    margin: 8px 0;
}

/* 업로드 진행 상황 */
.upload-progress-container {
    margin-top: 30px;
    padding: 24px;
    background: var(--background);
    border-radius: 12px;
}

.upload-progress-bar {
    width: 100%;
    height: 8px;
    background: var(--border-light);
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 12px;
}

.upload-progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--mckinsey-blue), var(--emphasis-orange));
    border-radius: 4px;
    transition: width 0.3s ease;
    animation: progressPulse 1.5s ease-in-out infinite;
}

@keyframes progressPulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
}

.upload-status {
    text-align: center;
    color: var(--mckinsey-blue);
    font-weight: 500;
    margin: 0;
}

/* 파일 정보 */
.file-info-container {
    margin-top: 30px;
}

.file-info {
    display: flex;
    align-items: center;
    padding: 16px;
    background: var(--background);
    border-radius: 12px;
    border: 1px solid var(--border-light);
}

.file-icon {
    font-size: 32px;
    color: var(--mckinsey-blue);
    margin-right: 16px;
}

.file-details {
    flex: 1;
}

.file-details h4 {
    font-size: 16px;
    color: var(--text-primary);
    margin: 0 0 4px 0;
    font-weight: 600;
}

.file-details p {
    font-size: 14px;
    color: var(--text-secondary);
    margin: 0;
}

.btn-remove {
    background: transparent;
    border: none;
    color: var(--error-red);
    font-size: 20px;
    cursor: pointer;
    padding: 8px;
    border-radius: 4px;
    transition: all 0.3s ease;
}

.btn-remove:hover {
    background: rgba(227, 27, 35, 0.1);
}

/* 파일 미리보기 */
.file-preview {
    margin-top: 20px;
}

.file-preview label {
    display: block;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 12px;
}

.preview-text {
    padding: 16px;
    background: white;
    border: 1px solid var(--border-light);
    border-radius: 8px;
    max-height: 200px;
    overflow-y: auto;
    font-size: 14px;
    line-height: 1.6;
    color: var(--text-primary);
    white-space: pre-wrap;
}

/* 스크롤바 스타일 */
.preview-text::-webkit-scrollbar {
    width: 8px;
}

.preview-text::-webkit-scrollbar-track {
    background: var(--background);
    border-radius: 4px;
}

.preview-text::-webkit-scrollbar-thumb {
    background: var(--border-light);
    border-radius: 4px;
}

.preview-text::-webkit-scrollbar-thumb:hover {
    background: var(--text-secondary);
}
📄 frontend/js/app.js (수정 - 파일 업로드 로직 추가)
javascript// ==========================================
// 파일 업로드 관련 변수
// ==========================================
let uploadedText = '';
let currentFile = null;

// ==========================================
// 파일 업로드 초기화
// ==========================================
function initFileUpload() {
    const uploadArea = document.getElementById('uploadArea');
    const fileInput = document.getElementById('fileInput');
    const selectFileBtn = document.getElementById('selectFileBtn');
    const removeFileBtn = document.getElementById('removeFileBtn');

    // 파일 선택 버튼 클릭
    selectFileBtn.addEventListener('click', () => {
        fileInput.click();
    });

    // 업로드 영역 클릭
    uploadArea.addEventListener('click', (e) => {
        if (e.target === uploadArea || e.target.closest('.upload-icon, .upload-area h3')) {
            fileInput.click();
        }
    });

    // 파일 선택
    fileInput.addEventListener('change', handleFileSelect);

    // 드래그 앤 드롭
    uploadArea.addEventListener('dragover', handleDragOver);
    uploadArea.addEventListener('dragleave', handleDragLeave);
    uploadArea.addEventListener('drop', handleDrop);

    // 파일 제거
    removeFileBtn.addEventListener('click', clearUploadedFile);
}

// ==========================================
// 드래그 오버
// ==========================================
function handleDragOver(e) {
    e.preventDefault();
    e.stopPropagation();
    document.getElementById('uploadArea').classList.add('drag-over');
}

// ==========================================
// 드래그 벗어남
// ==========================================
function handleDragLeave(e) {
    e.preventDefault();
    e.stopPropagation();
    document.getElementById('uploadArea').classList.remove('drag-over');
}

// ==========================================
// 드롭
// ==========================================
function handleDrop(e) {
    e.preventDefault();
    e.stopPropagation();
    document.getElementById('uploadArea').classList.remove('drag-over');

    const files = e.dataTransfer.files;
    if (files.length > 0) {
        handleFile(files[0]);
    }
}

// ==========================================
// 파일 선택 핸들러
// ==========================================
function handleFileSelect(e) {
    const files = e.target.files;
    if (files.length > 0) {
        handleFile(files[0]);
    }
}

// ==========================================
// 파일 처리
// ==========================================
async function handleFile(file) {
    // 파일 형식 검증
    const allowedExtensions = ['.docx', '.pdf', '.md'];
    const fileName = file.name.toLowerCase();
    const hasValidExtension = allowedExtensions.some(ext => fileName.endsWith(ext));

    if (!hasValidExtension) {
        showAlert('error', '지원하지 않는 파일 형식입니다. (DOCX, PDF, MD만 가능)');
        return;
    }

    // 파일 크기 검증 (10MB)
    const maxSize = 10 * 1024 * 1024;
    if (file.size > maxSize) {
        showAlert('error', `파일 크기가 너무 큽니다. (최대 10MB, 현재: ${(file.size / 1024 / 1024).toFixed(2)}MB)`);
        return;
    }

    // UI 업데이트 - 업로드 중
    showUploadProgress();

    try {
        // FormData 생성
        const formData = new FormData();
        formData.append('file', file);

        // API 호출
        const response = await fetch(`${API_BASE_URL}/upload-document`, {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.detail || '파일 업로드 실패');
        }

        const result = await response.json();

        // 업로드 성공
        currentFile = {
            name: result.filename,
            size: result.file_size,
            format: result.format,
            text: result.text
        };

        uploadedText = result.text;

        // UI 업데이트 - 파일 정보 표시
        showFileInfo(currentFile);

        // 다음 버튼 활성화
        document.getElementById('nextStep1Btn').disabled = false;

        showAlert('success', '파일이 성공적으로 업로드되었습니다!');

    } catch (error) {
        console.error('File upload error:', error);
        showAlert('error', `파일 업로드 실패: ${error.message}`);
        hideUploadProgress();
    }
}

// ==========================================
// 업로드 진행 상황 표시
// ==========================================
function showUploadProgress() {
    document.getElementById('uploadArea').style.display = 'none';
    document.getElementById('uploadProgress').style.display = 'block';
    document.getElementById('fileInfo').style.display = 'none';

    // 프로그레스 바 애니메이션
    const progressFill = document.getElementById('progressFill');
    progressFill.style.width = '0%';

    setTimeout(() => {
        progressFill.style.width = '90%';
    }, 100);
}

// ==========================================
// 업로드 진행 상황 숨기기
// ==========================================
function hideUploadProgress() {
    document.getElementById('uploadProgress').style.display = 'none';
    document.getElementById('uploadArea').style.display = 'block';
}

// ==========================================
// 파일 정보 표시
// ==========================================
function showFileInfo(file) {
    document.getElementById('uploadArea').style.display = 'none';
    document.getElementById('uploadProgress').style.display = 'none';
    document.getElementById('fileInfo').style.display = 'block';

    // 파일 이름
    document.getElementById('fileName').textContent = file.name;

    // 파일 크기
    const sizeInMB = (file.size / 1024 / 1024).toFixed(2);
    document.getElementById('fileSize').textContent = `${sizeInMB} MB · ${file.format.toUpperCase()} 문서`;

    // 미리보기 텍스트 (처음 500자)
    const previewLength = 500;
    const previewText = file.text.length > previewLength 
        ? file.text.substring(0, previewLength) + '...' 
        : file.text;
    document.getElementById('previewText').textContent = previewText;
}

// ==========================================
// 업로드된 파일 제거
// ==========================================
function clearUploadedFile() {
    currentFile = null;
    uploadedText = '';

    document.getElementById('fileInfo').style.display = 'none';
    document.getElementById('uploadArea').style.display = 'block';
    document.getElementById('fileInput').value = '';

    // 다음 버튼 비활성화
    updateNextButton();
}

// ==========================================
// 다음 버튼 상태 업데이트 (수정)
// ==========================================
function updateNextButton() {
    const textInput = document.getElementById('documentInput').value.trim();
    const hasText = textInput.length >= 100;
    const hasFile = uploadedText.length >= 100;

    document.getElementById('nextStep1Btn').disabled = !(hasText || hasFile);
}

// ==========================================
// Step 1 → Step 2 (수정)
// ==========================================
function moveToStep2() {
    // 텍스트 또는 파일에서 문서 내용 가져오기
    const textInput = document.getElementById('documentInput').value.trim();
    const documentContent = textInput || uploadedText;

    if (documentContent.length < 100) {
        showAlert('error', '문서 내용이 너무 짧습니다. (최소 100자)');
        return;
    }

    // 상태 저장
    state.document = documentContent;
    
    // UI 전환
    switchStep(2);
}

// ==========================================
// 초기화 시 파일 업로드 기능 추가 (수정)
// ==========================================
document.addEventListener('DOMContentLoaded', () => {
    initApp();
    initFileUpload();  // 파일 업로드 초기화 추가
});

✅ 검증 기준
1. 기능 테스트
bash# 1. 파일 선택 버튼 테스트
- [ ] "파일 선택" 버튼 클릭 → 파일 선택 대화상자 열림
- [ ] DOCX, PDF, MD 파일만 선택 가능

# 2. 드래그 앤 드롭 테스트
- [ ] 파일을 드래그하면 업로드 영역 하이라이트
- [ ] 파일 드롭 시 업로드 시작

# 3. 파일 업로드 프로세스
- [ ] 업로드 진행 상황 표시 (프로그레스 바)
- [ ] DOCX 파일 업로드 → 텍스트 추출 성공
- [ ] PDF 파일 업로드 → 텍스트 추출 성공
- [ ] MD 파일 업로드 → 텍스트 추출 성공

# 4. 파일 정보 표시
- [ ] 파일명, 크기, 형식 정확히 표시
- [ ] 추출된 내용 미리보기 (처음 500자)
- [ ] "X" 버튼으로 파일 제거 가능

# 5. 에러 처리
- [ ] 지원하지 않는 형식 업로드 시 에러 메시지
- [ ] 10MB 초과 파일 업로드 시 에러 메시지
- [ ] 파일 파싱 실패 시 에러 메시지

# 6. 통합 테스트
- [ ] 파일 업로드 → PPT 생성 → 다운로드 성공
- [ ] 텍스트 입력과 파일 업로드 탭 전환 정상 작동
2. UI/UX 테스트

 McKinsey 브랜드 색상 적용
 드래그 오버 시 시각적 피드백
 업로드 중 로딩 애니메이션
 모바일/태블릿 반응형 동작


🚀 실행 순서
bash# 1. 패키지 설치
pip install python-docx PyPDF2 markdown

# 2. Docker 재시작 (requirements.txt 반영)
cd D:\PPT_Designer_OK\mckinsey-ppt-generator
docker-compose down
docker-compose up --build -d

# 3. 테스트
# - http://localhost 접속
# - "파일 업로드" 탭 클릭
# - DOCX/PDF/MD 파일 업로드
# - PPT 생성 테스트

📝 주요 작업 포인트
백엔드 (Python)

✅ DocumentParser 클래스 - 3가지 파일 형식 파싱
✅ /upload-document API 엔드포인트
✅ 파일 크기/형식 검증 로직
✅ 임시 파일 관리 (업로드 → 처리 → 삭제)

프론트엔드 (JavaScript)

✅ 드래그 앤 드롭 UI
✅ 파일 업로드 API 연동
✅ 실시간 진행 상황 표시
✅ 파일 정보 및 미리보기
✅ 텍스트 입력/파일 업로드 탭 전환