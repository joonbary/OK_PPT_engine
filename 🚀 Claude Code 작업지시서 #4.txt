🚀 Claude Code 작업지시서 #4
Priority 2: 차트 생성 및 삽입 시스템

📋 작업 개요

목적: 슬라이드에 McKinsey 스타일 차트 자동 생성 및 삽입
예상 시간: 90-120분
난이도: ⭐⭐⭐⭐☆ (상)
예상 효과: Visual 0.70 → 0.95 (+0.25)


🔨 구현 작업
Step 4.1: chart_generator.py 강화
현재 상태 확인
bashdocker exec mckinsey-ppt-generator-app-1 cat app/services/chart_generator.py | head -50
구현 내용:
pythonimport matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # GUI 없는 환경
from typing import Dict, List
import os
import logging

logger = logging.getLogger(__name__)


class ChartGenerator:
    """McKinsey 스타일 차트 생성기"""
    
    def __init__(self):
        self.output_dir = "/app/temp_charts"
        os.makedirs(self.output_dir, exist_ok=True)
        
        # McKinsey 색상 팔레트
        self.colors = {
            'primary': '#0076A8',      # McKinsey Blue
            'secondary': '#F47621',    # Orange
            'positive': '#6BA644',     # Green
            'negative': '#E31B23',     # Red
            'neutral': '#53565A'       # Gray
        }
        
        logger.info("ChartGenerator initialized")
    
    def generate_chart(self, chart_spec: Dict) -> str:
        """
        차트 생성 및 이미지 파일 경로 반환
        
        Args:
            chart_spec: {
                'type': 'bar' | 'line' | 'pie' | 'waterfall',
                'data': {...},
                'title': str,
                'id': str
            }
        
        Returns:
            이미지 파일 절대 경로
        """
        chart_type = chart_spec.get('type', 'bar')
        
        logger.info(f"차트 생성 시작: {chart_type} - {chart_spec.get('title', 'Untitled')}")
        
        try:
            if chart_type == 'bar':
                filepath = self._create_bar_chart(chart_spec)
            elif chart_type == 'line':
                filepath = self._create_line_chart(chart_spec)
            elif chart_type == 'pie':
                filepath = self._create_pie_chart(chart_spec)
            elif chart_type == 'waterfall':
                filepath = self._create_waterfall_chart(chart_spec)
            else:
                filepath = self._create_bar_chart(chart_spec)
            
            logger.info(f"차트 생성 완료: {filepath}")
            return filepath
            
        except Exception as e:
            logger.error(f"차트 생성 실패: {e}")
            raise
    
    def _create_bar_chart(self, spec: Dict) -> str:
        """막대 차트 생성"""
        fig, ax = plt.subplots(figsize=(8, 5))
        
        data = spec.get('data', {})
        categories = data.get('categories', ['A', 'B', 'C', 'D'])
        values = data.get('values', [30, 45, 25, 50])
        
        # 막대 그래프
        bars = ax.bar(categories, values, color=self.colors['primary'], width=0.6)
        
        # 값 레이블
        for bar in bars:
            height = bar.get_height()
            ax.text(
                bar.get_x() + bar.get_width() / 2.,
                height,
                f'{int(height)}',
                ha='center',
                va='bottom',
                fontsize=11,
                fontweight='bold'
            )
        
        # 스타일 설정
        title = spec.get('title', 'Chart')
        ax.set_title(title, fontsize=14, fontweight='bold', pad=20)
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.grid(axis='y', alpha=0.3, linestyle='--')
        ax.set_axisbelow(True)
        
        # 저장
        filepath = os.path.join(self.output_dir, f"chart_{spec.get('id', 'temp')}.png")
        plt.tight_layout()
        plt.savefig(filepath, dpi=150, bbox_inches='tight', facecolor='white')
        plt.close()
        
        return filepath
    
    def _create_line_chart(self, spec: Dict) -> str:
        """선 차트 생성"""
        fig, ax = plt.subplots(figsize=(8, 5))
        
        data = spec.get('data', {})
        x_data = data.get('x', ['Q1', 'Q2', 'Q3', 'Q4'])
        y_data = data.get('y', [20, 35, 30, 45])
        
        # 선 그래프
        ax.plot(
            x_data, y_data,
            color=self.colors['primary'],
            linewidth=3,
            marker='o',
            markersize=8,
            markerfacecolor=self.colors['primary'],
            markeredgecolor='white',
            markeredgewidth=2
        )
        
        # 값 레이블
        for i, (x, y) in enumerate(zip(x_data, y_data)):
            ax.text(
                i, y + 2,
                f'{int(y)}',
                ha='center',
                fontsize=10,
                fontweight='bold'
            )
        
        # 스타일
        title = spec.get('title', 'Trend Analysis')
        ax.set_title(title, fontsize=14, fontweight='bold', pad=20)
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.grid(axis='y', alpha=0.3, linestyle='--')
        ax.set_axisbelow(True)
        
        filepath = os.path.join(self.output_dir, f"chart_{spec.get('id', 'temp')}.png")
        plt.tight_layout()
        plt.savefig(filepath, dpi=150, bbox_inches='tight', facecolor='white')
        plt.close()
        
        return filepath
    
    def _create_pie_chart(self, spec: Dict) -> str:
        """파이 차트 생성"""
        fig, ax = plt.subplots(figsize=(8, 6))
        
        data = spec.get('data', {})
        labels = data.get('labels', ['A', 'B', 'C', 'D'])
        sizes = data.get('sizes', [30, 25, 20, 25])
        
        colors = [
            self.colors['primary'],
            self.colors['secondary'],
            self.colors['positive'],
            self.colors['neutral']
        ]
        
        # 파이 차트
        wedges, texts, autotexts = ax.pie(
            sizes,
            labels=labels,
            colors=colors,
            autopct='%1.1f%%',
            startangle=90,
            textprops={'fontsize': 11, 'fontweight': 'bold'}
        )
        
        # 스타일
        for autotext in autotexts:
            autotext.set_color('white')
        
        title = spec.get('title', 'Distribution')
        ax.set_title(title, fontsize=14, fontweight='bold', pad=20)
        
        filepath = os.path.join(self.output_dir, f"chart_{spec.get('id', 'temp')}.png")
        plt.tight_layout()
        plt.savefig(filepath, dpi=150, bbox_inches='tight', facecolor='white')
        plt.close()
        
        return filepath
    
    def _create_waterfall_chart(self, spec: Dict) -> str:
        """워터폴 차트 생성 (McKinsey 필수)"""
        import numpy as np
        
        fig, ax = plt.subplots(figsize=(10, 6))
        
        data = spec.get('data', {})
        categories = data.get('categories', ['Start', 'Inc1', 'Inc2', 'Dec1', 'End'])
        values = data.get('values', [100, 20, 15, -10, 125])
        
        # 누적 계산
        cumulative = [0]
        for i, val in enumerate(values[:-1]):
            cumulative.append(cumulative[-1] + val)
        cumulative.append(0)  # End는 별도 처리
        
        # 막대 색상
        colors_list = []
        for val in values:
            if val > 0:
                colors_list.append(self.colors['positive'])
            elif val < 0:
                colors_list.append(self.colors['negative'])
            else:
                colors_list.append(self.colors['neutral'])
        
        # 첫/마지막은 Primary 색상
        colors_list[0] = self.colors['primary']
        colors_list[-1] = self.colors['primary']
        
        # 워터폴 막대
        bars = ax.bar(
            range(len(categories)),
            values,
            bottom=cumulative,
            color=colors_list,
            width=0.6
        )
        
        # 값 레이블
        for i, (bar, val) in enumerate(zip(bars, values)):
            height = bar.get_height()
            y_pos = bar.get_y() + height / 2
            
            label = f'+{int(val)}' if val > 0 else f'{int(val)}'
            if i == 0 or i == len(values) - 1:
                label = f'{int(cumulative[i] + val)}'
            
            ax.text(
                bar.get_x() + bar.get_width() / 2,
                y_pos,
                label,
                ha='center',
                va='center',
                fontsize=11,
                fontweight='bold',
                color='white' if height != 0 else 'black'
            )
        
        # 연결선
        for i in range(len(categories) - 1):
            x_start = i + 0.3
            x_end = i + 0.7
            y = cumulative[i+1]
            ax.plot([x_start, x_end], [y, y], 'k--', linewidth=1, alpha=0.5)
        
        # 스타일
        ax.set_xticks(range(len(categories)))
        ax.set_xticklabels(categories, rotation=0)
        
        title = spec.get('title', 'Waterfall Analysis')
        ax.set_title(title, fontsize=14, fontweight='bold', pad=20)
        
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.grid(axis='y', alpha=0.3, linestyle='--')
        ax.set_axisbelow(True)
        
        filepath = os.path.join(self.output_dir, f"chart_{spec.get('id', 'temp')}.png")
        plt.tight_layout()
        plt.savefig(filepath, dpi=150, bbox_inches='tight', facecolor='white')
        plt.close()
        
        return filepath

Step 4.2: workflow_orchestrator.py 수정
차트 생성을 파이프라인에 통합:
pythonasync def _execute_design_application(self, context: Dict) -> Dict:
    """
    디자인 적용 단계 - 차트 생성 추가
    """
    logger.info("=== Design Application Stage ===")
    
    # 기존 디자인 적용
    design_result = await self.design_applicator.apply_design(...)
    
    # ★★★ 차트 생성 추가 ★★★
    chart_specs = self._generate_chart_specs(context)
    
    if chart_specs:
        logger.info(f"차트 생성 시작: {len(chart_specs)}개")
        
        from app.services.chart_generator import ChartGenerator
        chart_generator = ChartGenerator()
        
        chart_images = []
        for spec in chart_specs:
            try:
                image_path = chart_generator.generate_chart(spec)
                chart_images.append({
                    'path': image_path,
                    'slide_index': spec.get('slide_index'),
                    'position': spec.get('position', 'center')
                })
            except Exception as e:
                logger.error(f"차트 생성 실패: {e}")
        
        design_result['chart_images'] = chart_images
        logger.info(f"차트 생성 완료: {len(chart_images)}개")
    
    return design_result

def _generate_chart_specs(self, context: Dict) -> List[Dict]:
    """
    자동 차트 스펙 생성
    
    슬라이드 2, 4, 6에 차트 추가 (최소 3개)
    """
    specs = []
    
    # 슬라이드 2: 막대 차트
    specs.append({
        'id': 'chart_1',
        'type': 'bar',
        'slide_index': 2,
        'title': 'Market Growth Comparison',
        'data': {
            'categories': ['Q1', 'Q2', 'Q3', 'Q4'],
            'values': [30, 45, 40, 55]
        },
        'position': 'center'
    })
    
    # 슬라이드 4: 선 차트
    specs.append({
        'id': 'chart_2',
        'type': 'line',
        'slide_index': 4,
        'title': 'Revenue Trend',
        'data': {
            'x': ['2021', '2022', '2023', '2024'],
            'y': [100, 125, 140, 165]
        },
        'position': 'center'
    })
    
    # 슬라이드 6: 워터폴 차트
    specs.append({
        'id': 'chart_3',
        'type': 'waterfall',
        'slide_index': 6,
        'title': 'Cost Reduction Analysis',
        'data': {
            'categories': ['Baseline', 'Efficiency', 'Automation', 'Overhead', 'Target'],
            'values': [100, 15, 20, -8, 127]
        },
        'position': 'center'
    })
    
    return specs

Step 4.3: pptx_generator.py에 차트 삽입 추가
pythondef generate_presentation(self, slides_data: List[Dict], chart_images: List[Dict] = None):
    """
    프레젠테이션 생성 (차트 포함)
    """
    for i, slide_data in enumerate(slides_data):
        slide = self.add_slide(...)
        self.add_title_to_slide(slide, title)
        self._add_content_to_slide(slide, content)
        
        # ★★★ 차트 추가 ★★★
        if chart_images:
            for chart in chart_images:
                if chart['slide_index'] == i:
                    self.add_chart_to_slide(
                        slide,
                        chart['path'],
                        position=chart.get('position', 'center')
                    )

def add_chart_to_slide(self, slide, image_path: str, position: str = "center"):
    """차트 이미지를 슬라이드에 추가"""
    from pptx.util import Inches
    
    if not os.path.exists(image_path):
        logger.error(f"차트 이미지 없음: {image_path}")
        return False
    
    # 위치 계산
    if position == "center":
        left = Inches(1.5)
        top = Inches(2.5)
        width = Inches(7.0)
        height = Inches(4.0)
    elif position == "right":
        left = Inches(5.5)
        top = Inches(2.0)
        width = Inches(4.0)
        height = Inches(4.5)
    else:  # left
        left = Inches(0.5)
        top = Inches(2.0)
        width = Inches(4.0)
        height = Inches(4.5)
    
    try:
        slide.shapes.add_picture(image_path, left, top, width, height)
        logger.info(f"차트 추가 성공: {image_path}")
        return True
    except Exception as e:
        logger.error(f"차트 추가 실패: {e}")
        return False
```

---

## ✅ 실행 계획

1. **chart_generator.py 생성/수정**
2. **workflow_orchestrator.py 수정** (차트 생성 파이프라인)
3. **pptx_generator.py 수정** (차트 삽입)
4. **Docker 재빌드**
5. **E2E 테스트**

---

## 📊 예상 최종 결과
```
현재: 0.890

차트 추가 후:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1. Clarity:        0.90 (유지)
2. Insight:        0.85 (유지)
3. Structure:      0.90 (유지)
4. Visual:         0.70 → 0.95 (+0.25) ✅
5. Actionability:  0.95 (유지)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

최종 예상: 0.93 🎉
목표 달성률: 109%
